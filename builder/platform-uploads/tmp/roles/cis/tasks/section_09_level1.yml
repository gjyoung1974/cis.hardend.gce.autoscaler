---

  - name: 9.1.1.1 Check that cron conf file exists (check) (Scored)
    stat: path=/etc/init/cron.conf
    register: cron_conf_stat
    tags:
      - section9
      - section9.1
      - section9.1.1
      - section9.1.1.1

  - name: 9.1.1.2 Enable cron Daemon (Scored)
    service: >
        name=cron
        state=started
        enabled=yes
    when: not cron_conf_stat.stat.exists
    tags:
      - section9
      - section9.1
      - section9.1.1
      - section9.1.1.2

  - name: 9.1.2 Set User/Group Owner and Permission on /etc/crontab (Scored)
    file: path='/etc/crontab' owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.2

  - name: 9.1.3 Set User/Group Owner and Permission on /etc/cron.hourly (Scored)
    file: path=/etc/cron.hourly owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.3

  - name: 9.1.4 Set User/Group Owner and Permission on /etc/cron.daily (Scored)
    file: path=/etc/cron.daily owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.4

  - name: 9.1.5 Set User/Group Owner and Permission on /etc/cron.weekly(Scored)
    file: path=/etc/cron.weekly owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.5

  - name: 9.1.6 Set User/Group Owner and Permission on /etc/cron.monthly(Scored)
    file: path=/etc/cron.monthly owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.6

  - name: 9.1.7 Set User/Group Owner and Permission on /etc/cron.d (Scored)
    file: path=/etc/cron.d owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.7

  - name: 9.1.8 Restrict at/cron to Authorized Users (Scored)
    file: path={{ item }} state=absent
    with_items:
        - /etc/cron.deny
        - /etc/at.deny
    tags:
      - section9
      - section9.1
      - section9.1.8
  
  - name: 9.1.8 Restrict at/cron to Authorized Users (preparation) (Scored)
    stat: path=/etc/cron.allow
    register: cron_allow_path
    tags:
      - section9
      - section9.1
      - section9.1.8


  - name: 9.1.8 Restrict at/cron to Authorized Users (preparation) (Scored)
    shell: touch /etc/cron.allow
    when: cron_allow_path.stat.exists == False
    tags:
      - section9
      - section9.1
      - section9.1.8

  - name: 9.1.8 Restrict at/cron to Authorized Users (Scored)
    file: path=/etc/cron.allow owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.8

  - name: 9.1.8 Restrict at/cron to Authorized Users (preparation) (Scored)
    stat: path=/etc/at.allow
    register: at_allow_path
    tags:
      - section9
      - section9.1
      - section9.1.8

  - name: 9.1.8 Restrict at/cron to Authorized Users (preparation) (Scored)
    shell: touch /etc/at.allow
    when: at_allow_path.stat.exists == False
    tags:
      - section9
      - section9.1
      - section9.1.8

  - name: 9.1.8 Restrict at/cron to Authorized Users (Scored)
    file: path=/etc/at.allow owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.8
 
  - name: 9.2.1 Set Password Creation Requirement Parameters Using pam_cracklib (install) (Scored)
    apt: name=libpam-cracklib state=present
    when: use_pam_cracklib == True
    tags:
      - section9
      - section9.2
      - section9.2.1
      
  - name: 9.2.1 Set Password Creation Requirement Parameters Using pam_cracklib (Scored)
    lineinfile: >
        dest='/etc/pam.d/common-password'
        regexp="pam_cracklib.so"
        line="password required pam_cracklib.so retry=3 minlen=14 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1"
        state=present
    when: use_pam_cracklib == True
    tags:
      - section9
      - section9.2
      - section9.2.1

#Note for section 9.2.2:
#If a user has been locked out because they have reached the maximum consecutive failure count 
#defined by denied= in the pam_tally2.so module, the user can be unlocked by issuing the command
#/sbin/pam_tally2 -u username --reset
#This command sets the failed count to 0, effectively unlocking the user
  - name: 9.2.2 Set Lockout for Failed Password Attempts (Not Scored)
    lineinfile: >
        dest='/etc/pam.d/login' 
        regexp='pam_tally2'
        line="auth required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900"
        state=present
    tags:
      - section9
      - section9.2
      - section9.2.2

  - name: 9.2.3 Limit Password Reuse (Scored)
    lineinfile: >
        dest='/etc/pam.d/common-password' 
        regexp='remember=5'
        line="password sufficient pam_unix.so remember=5"
        state=present
    tags:
      - section9
      - section9.2
      - section9.2.3

  - name: 9.3 Check if ssh is installed (check)
    stat: path='/etc/ssh/sshd_config'
    register: ssh_config_file
    tags:
      - section9
      - section9.3
      - section9.3.1


  - name: 9.3.1 Set SSH Protocol to 2 (Scored)
    lineinfile: >
        dest='/etc/ssh/sshd_config' 
        regexp='^Protocol'
        state=present
        line='Protocol 2'
    when: ssh_config_file.stat.exists == True
    tags:
      - section9
      - section9.3
      - section9.3.1

  - name: 9.3.2 Set LogLevel to INFO (Scored)
    lineinfile: >
        dest='/etc/ssh/sshd_config' 
        regexp='^LogLevel'
        state=present
        line='LogLevel INFO'
    when: ssh_config_file.stat.exists == True
    tags:
      - section9
      - section9.3
      - section9.3.2

  - name: 9.3.3 Set Permissions on /etc/ssh/sshd_config (Scored)
    file: path='/etc/ssh/sshd_config' owner=root group=root mode=600
    when: ssh_config_file.stat.exists == True
    tags:
      - section9
      - section9.3
      - section9.3.3

#Regroups sections 9.3.4 9.3.7 9.3.8 9.3.9 9.3.10
  - name: 9.3.{4,7,8,9,10} Disable some SSH options (Scored)
    lineinfile: >
        dest='/etc/ssh/sshd_config'
        regexp='^{{ item }}'
        line='{{ item }} no'
        state=present
    with_items: 
      - X11Forwarding
      - HostbasedAuthentication
      - PermitRootLogin
      - PermitEmptyPasswords
      - PermitUserEnvironment
    tags:
      - section9
      - section9.3
      - section9.3.4
      - section9.3.7
      - section9.3.8
      - section9.3.9
      - section9.3.10

  - name: 9.3.5 Set SSH MaxAuthTries to 4 or Less (Scored)
    lineinfile: >
        dest='/etc/ssh/sshd_config'
        regexp='^MaxAuthTries'
        line='MaxAuthTries 4'
        state=present
    tags:
      - section9
      - section9.3
      - section9.3.5

  - name: 9.3.6 Set SSH IgnoreRhosts to Yes (Scored)
    lineinfile: >
        dest='/etc/ssh/sshd_config'
        regexp='^IgnoreRhosts'
        line='IgnoreRhosts yes'
        state=present
    tags:
      - section9
      - section9.3
      - section9.3.6

  - name: 9.3.11 Use Only Approved Cipher in Counter Mode (Scored)
    lineinfile: >
        dest='/etc/ssh/sshd_config'
        regexp='^Ciphers'
        line='Ciphers aes128-ctr,aes192-ctr,aes256-ctr'
        state=present
    tags:
      - section9
      - section9.3
      - section9.3.11

  - name: 9.3.12.1 Set Idle Timeout Interval for User Login (Scored)
    lineinfile: >
        dest='/etc/ssh/sshd_config'
        regexp='^ClientAliveInterval'
        line='ClientAliveInterval 300'
        state=present
    tags:
      - section9
      - section9.3
      - section9.3.12
      - section9.3.12.1

  - name: 9.3.12.2 Set Idle Timeout Interval for User Login (Scored)
    lineinfile: >
        dest='/etc/ssh/sshd_config'
        regexp='^ClientAliveCountMax'
        line='ClientAliveCountMax 0'
        state=present
    tags:
      - section9
      - section9.3
      - section9.3.12
      - section9.3.12.2

  - name: 9.3.13.1 Limit Access via SSH (Scored)
    shell: grep AllowUsers /etc/ssh/sshd_config
    register: allow_rc
    failed_when: allow_rc.rc == 1
    changed_when: False
    ignore_errors: True
    tags:
      - section9
      - section9.3
      - section9.3.13
      - section9.3.13.1

  - name: 9.3.13.2 Limit Access via SSH (Scored)
    shell: grep AllowGroups /etc/ssh/sshd_config
    register: allow_rc
    failed_when: allow_rc.rc == 1
    changed_when: False
    ignore_errors: True
    tags:
      - section9
      - section9.3
      - section9.3.13
      - section9.3.13.2

  - name: 9.3.13.3 Limit Access via SSH (Scored)
    shell: grep DenyUsers /etc/ssh/sshd_config
    register: allow_rc
    failed_when: allow_rc.rc == 1
    changed_when: False
    ignore_errors: True
    tags:
      - section9
      - section9.3
      - section9.3.13
      - section9.3.13.3

  - name: 9.3.13.4 Limit Access via SSH (Scored)
    shell: grep DenyGroups /etc/ssh/sshd_config
    register: allow_rc
    failed_when: allow_rc.rc == 1
    changed_when: False
    ignore_errors: True
    tags:
      - section9
      - section9.3
      - section9.3.13
      - section9.3.13.4

  - name: 9.3.14 Set SSH Banner (Scored)
    lineinfile: >
        dest='/etc/ssh/sshd_config'
        regexp='^Banner'
        line='Banner /etc/issue.net'
        state=present
    tags:
      - section9
      - section9.3
      - section9.3.14

  - name: 9.4 Restrict root Login to System Console (Not Scored)
    stat: path=/etc/securetty
    register: securetty_file
    tags:
      - section9
      - section9.4

  - name: 9.4 Restrict root Login to System Console (Not Scored)
    debug: msg='*** Check /etc/securetty for console allowed for root access ***'
    when: securetty_file.stat.exists == True
    tags:
      - section9
      - section9.4

  - name: 9.5.1 Restrict Access to the su Command (Scored)
    lineinfile: >
        dest='/etc/pam.d/su'
        line='auth            required        pam_wheel.so use_uid'
        state=present
    tags:
      - section9
      - section9.5
      - section9.5.1
